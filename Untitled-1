from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time
import pandas as pd
from datetime import datetime
import os

def get_youtube_info(url):
    # Chrome 드라이버 설정
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')  # 브라우저 창을 띄우지 않고 실행
    driver = webdriver.Chrome(options=options)
    
    try:
        # URL 접속
        driver.get(url)
        time.sleep(3)  # 페이지 로딩 대기
        
        # 좋아요 수 가져오기
        like_button = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, '//ytd-menu-renderer[@class="style-scope ytd-watch-metadata"]//button[@aria-label*="좋아요"]'))
        )
        likes = like_button.get_attribute('aria-label').split('좋아요')[0].strip()
        
        # 댓글 섹션으로 스크롤
        driver.execute_script("window.scrollTo(0, 500)")
        time.sleep(2)
        
        # 댓글 로딩 대기
        comments = []
        last_height = driver.execute_script("return document.documentElement.scrollHeight")
        
        # 댓글 10개만 수집 (더 많이 필요하면 숫자 조정)
        while len(comments) < 10:
            # 페이지 끝까지 스크롤
            driver.execute_script("window.scrollTo(0, document.documentElement.scrollHeight);")
            time.sleep(2)
            
            # 댓글 요소들 가져오기
            comment_elements = driver.find_elements(By.XPATH, '//ytd-comment-renderer//yt-formatted-string[@id="content-text"]')
            
            # 새로운 댓글들 추가
            for element in comment_elements:
                comment_text = element.text
                if comment_text not in comments:
                    comments.append(comment_text)
            
            # 스크롤이 더 이상 되지 않으면 종료
            new_height = driver.execute_script("return document.documentElement.scrollHeight")
            if new_height == last_height:
                break
            last_height = new_height
            
        return {
            'likes': likes,
            'comments': comments[:10]  # 최대 10개 댓글만 반환
        }
        
    finally:
        driver.quit()

def save_youtube_info(url):
    # ... 이전 크롤링 코드는 동일 ...
    
    try:
        # 데이터 수집 (이전 코드와 동일)
        result = get_youtube_info(url)
        
        # 저장할 폴더 생성
        save_folder = "youtube_data"
        if not os.path.exists(save_folder):
            os.makedirs(save_folder)
            
        # 현재 날짜와 시간으로 파일명 생성
        current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
        video_id = url.split('watch?v=')[1]
        
        # 좋아요 수와 기본 정보를 CSV로 저장
        info_df = pd.DataFrame({
            'video_id': [video_id],
            'url': [url],
            'likes': [result['likes']],
            'collected_at': [current_time]
        })
        info_file = f"{save_folder}/video_info_{current_time}.csv"
        info_df.to_csv(info_file, index=False, encoding='utf-8-sig')
        
        # 댓글을 별도의 CSV 파일로 저장
        comments_df = pd.DataFrame({
            'video_id': [video_id] * len(result['comments']),
            'comment': result['comments'],
            'collected_at': [current_time] * len(result['comments'])
        })
        comments_file = f"{save_folder}/comments_{current_time}.csv"
        comments_df.to_csv(comments_file, index=False, encoding='utf-8-sig')
        
        print(f"데이터가 다음 위치에 저장되었습니다:")
        print(f"비디오 정보: {info_file}")
        print(f"댓글 정보: {comments_file}")
        
        return result
        
    except Exception as e:
        print(f"에러 발생: {str(e)}")
        return None

# 사용 예시
if __name__ == "__main__":
    video_url = "https://www.youtube.com/watch?v=비디오ID"
    result = save_youtube_info(video_url)
    
    print(f"좋아요 수: {result['likes']}")
    print("\n댓글들:")
    for i, comment in enumerate(result['comments'], 1):
        print(f"{i}. {comment}\n")
